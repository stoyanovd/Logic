#include "some.h"

//////////////////////////////////////////////////////////////////////////////////

int Z(int x)
{
	return 0;
}

int N(int x)
{
	return x + 1;
}

template<int i, int n>
int U(int * x)
{
	return x[i - 1];
}

template<int n, int m, int (*f)(int *), int (**g)(int *)>
int S(int * x)
{
	int a[n];
	for(int i = 0; i < n; i++)
		a[i] = g[i](x);
	return f(a);
}

template<int n, int (*f)(int *), int (*g)(int *, int, int)>
int R(int * x, int y)
{
	if(y == 0)
		return f(x);
	return g(x, y - 1, R<n, f, g>(x, y - 1));
}

//////////////////////////////////////////////////////////////////////////////////

template<int n, int (*f)(int *, int)>
int M(int * x)
{
	for(int i = 0; i < MAX_MINIMIZE; i++)
		if(f(x, i) == 0)
			return i;
	std::cout<<"UNDEFINED MINIMIZE\n";
	return 0;
}

//////////////////////////////////////////////////////////////////////////////////

int sum_f(int * x)
{
	return U<1, 1>(x);
}

int sum_g(int * x, int y, int z)
{
	return N(z);
}

int sum(int a, int b)
{
	int * x = new int[1];
	x[0] = a;
	int res = R<1, &sum_f, &sum_g>(x, b);
	delete [] x;
	return res;
}

//////////////////////////////////////////////////////////////////////////////////

int multiply_f(int * x)
{
	return Z(U<1, 1>(x));
}

int multiply_g(int * x, int y, int z)
{
	return sum(U<1, 1>(x), z);
}

int multiply(int a, int b)
{
	int * x = new int[1];
	x[0] = a;
	int res = R<1, &multiply_f, &multiply_g>(x, b);
	delete [] x;
	return res;
}

//////////////////////////////////////////////////////////////////////////////////

template<int m>
int hyper_f(int * x)
{
	return N(Z(U<1, 1>(x)));
}

template<int m>
int hyper_g(int * x, int y, int z)
{
	return hyper<m - 1>(U<1, 1>(x), z);
}

template<int m>
int hyper(int a, int b)
{
	int * x = new int[1];
	x[0] = a;
	int res = R<1, &hyper_f<m>, &hyper_g<m>>(x, b);
	delete [] x;
	return res;
}

template<>
int hyper<2>(int a, int b)
{
	return multiply(a, b);
}
template<>
int hyper<1>(int a, int b)
{
	return sum(a, b);
}
//////////////////////////////////////////////////////////////////////////////////

int decrease_f(int * x)
{
	return Z(U<1, 1>(x));
}

int decrease_g(int * x, int y, int z)
{
	int * a = new int[3];
	a[0] = x[0];
	a[1] = y;
	a[2] = z;
	int res = U<2, 3>(a);
	delete [] a;
	return res;
}

int decrease(int x)
{
	int * a = new int[1];
	a[0] = x;
	int res = R<1, &decrease_f, &decrease_g>(a, x);
	delete [] a;
	return res;
}

//////////////////////////////////////////////////////////////////////////////////

int moreThanZero_f(int * x)
{
	return Z(U<1, 1>(x));
}

int moreThanZero_g(int * x, int y, int z)
{
	return N(Z(U<1, 1>(x)));
}

int moreThanZero(int x)
{
	int * a = new int[1];
	a[0] = 0;
	int res = R<1, &moreThanZero_f, &moreThanZero_g>(a, x);
	delete [] a;
	return res;
}

//////////////////////////////////////////////////////////////////////////////////

int equalZero_f(int * x)
{
	return N(Z(U<1, 1>(x)));
}

int equalZero_g(int * x, int y, int z)
{
	return decrease(z);
}

int equalZero(int x)
{
	int * a = new int[1];
	a[0] = 0;
	int res = R<1, &equalZero_f, &equalZero_g>(a, moreThanZero(x));
	delete [] a;
	return res;
}

//////////////////////////////////////////////////////////////////////////////////
int substract_f(int * x)
{
	return U<1, 1>(x);
}

int substract_g(int * x, int y, int z)
{
	return decrease(z);
}

int substract(int x, int y)
{
	int * a = new int[1];
	a[0] = x;
	int res = R<1, &substract_f, &substract_g>(a, y);
	delete [] a;
	return res;
}

//////////////////////////////////////////////////////////////////////////////////

int divide_f(int * x)
{
	return Z(U<1, 1>(x));
}

int divide_g(int * x, int y, int z)
{
	int * a = new int[2];
	a[0] = substract(U<1, 2>(x), U<2, 2>(x));
	a[1] = U<2, 2>(x);
	int res = N(R<1, &divide_f, &divide_g>(a, moreThanZero(substract(U<1, 2>(x), U<2, 2>(x)))));
	delete [] a;
	return res;
}

int divide(int x, int y)
{
	int * a = new int[2];
	a[0] = N(x);
	a[1] = y;
	int res = decrease(R<1, &divide_f, &divide_g>(a, moreThanZero(x)));
	delete [] a;
	return res;
}

//////////////////////////////////////////////////////////////////////////////////

int mod(int x, int y)
{
	return substract(x, multiply(divide(x, y), y));
}

//////////////////////////////////////////////////////////////////////////////////

int isPrime_f(int * x)
{
	return Z(U<1, 1>(x));
}

int isPrime_g(int * x, int y, int z)
{
	return sum(z, moreThanZero(mod(U<1, 1>(x), y)));
}

int isPrime(int x)
{  //equalZero(decrease
	int * a = new int[2];
	a[0] = x;
	int res = R<1, &isPrime_f, &isPrime_g>(a, x);
	delete [] a;
	return res;
}

//////////////////////////////////////////////////////////////////////////////////

struct Output
{
	void summa()
	{
		std::cout<<"R< U<1, 1>, N> (a, b)\n";

		std::cout<<sum(1, 1)<<std::endl;
		std::cout<<sum(2, 0)<<std::endl;
		std::cout<<sum(5, 4)<<std::endl;
	}
	void multiplication()
	{
		std::cout<<"R< U<1, 1>, N> (a, b)\n";

		std::cout<<multiply(3, 1)<<std::endl;
		std::cout<<multiply(2, 0)<<std::endl;
		std::cout<<multiply(5, 4)<<std::endl;
	}
	void moreThanZeroOutput()
	{
		std::cout<<"R< U<1, 1>, N> (a, b)\n";

		std::cout<<moreThanZero(1)<<std::endl;
		std::cout<<moreThanZero(0)<<std::endl;
		std::cout<<moreThanZero(4)<<std::endl;
	}

	void decrease_key()
	{
		std::cout<<"R< U<1, 1>, N> (a, b)\n";

		std::cout<<decrease(1)<<std::endl;
		std::cout<<decrease(0)<<std::endl;
		std::cout<<decrease(5)<<std::endl;
	}
	
	void substraction()
	{
		std::cout<<"R< U<1, 1>, N> (a, b)\n";

		std::cout<<substract(1, 1)<<std::endl;
		std::cout<<substract(2, 0)<<std::endl;
		std::cout<<substract(5, 4)<<std::endl;
	}
	void equalZeroOutput()
	{
		std::cout<<"    equalZero\n";
		std::cout<<"R< U<1, 1>, N> (a, b)\n";

		std::cout<<"right = "<<(0 == 0)<<"       my = "<<equalZero(0)<<std::endl;
		std::cout<<"right = "<<(1 == 0)<<"       my = "<<equalZero(1)<<std::endl;
		std::cout<<"right = "<<(3 == 0)<<"       my = "<<equalZero(3)<<std::endl;
	}
	void division()
	{
		std::cout<<"    division\n";
		std::cout<<"R< U<1, 1>, N> (a, b)\n";

		std::cout<<"right = "<<2/1<<"       my = "<<divide(2, 1)<<std::endl;
		/*std::cout<<"right = "<<2/3<<"       my = "<<divide(2, 3)<<std::endl;
		std::cout<<"right = "<<9/4<<"       my = "<<divide(9, 4)<<std::endl;
		std::cout<<"right = 0/0"<<"       my = "<<divide(0, 0)<<std::endl;
		std::cout<<"right = 3/0"<<"       my = "<<divide(3, 0)<<std::endl;*/
	}
	void modOutput()
	{
		std::cout<<"    mod\n";
		std::cout<<"R< U<1, 1>, N> (a, b)\n";

		std::cout<<"right = "<<2%1<<"       my = "<<mod(2, 1)<<std::endl;
		std::cout<<"right = "<<2%3<<"       my = "<<mod(2, 3)<<std::endl;
		std::cout<<"right = "<<9%4<<"       my = "<<mod(9, 4)<<std::endl;
	}
	void isPrimeOutput()
	{
		std::cout<<"    isPrime\n";
		std::cout<<"R< U<1, 1>, N> (a, b)\n";
		
		std::cout<<"right = 0"<<"       my = "<<isPrime(0)<<std::endl;
		std::cout<<"right = 1"<<"       my = "<<isPrime(1)<<std::endl;
		std::cout<<"right = 2"<<"       my = "<<isPrime(2)<<std::endl;
		std::cout<<"right = 3"<<"       my = "<<isPrime(3)<<std::endl;
		std::cout<<"right = 9"<<"       my = "<<isPrime(9)<<std::endl;
	}
	void hyperOutput()
	{
		std::cout<<"    hyper\n";
		
		std::cout<<"right = hyper<1>(3, 4)"<<"       my = "<<hyper<1>(3, 4)<<std::endl;
		std::cout<<"right = hyper<2>(3, 4)"<<"       my = "<<hyper<2>(3, 4)<<std::endl;
		std::cout<<"right = hyper<3>(3, 4)"<<"       my = "<<hyper<3>(3, 4)<<std::endl;
		std::cout<<"right = hyper<1>(2, 3)"<<"       my = "<<hyper<1>(2, 3)<<std::endl;
		std::cout<<"right = hyper<2>(2, 3)"<<"       my = "<<hyper<2>(2, 3)<<std::endl;
		std::cout<<"right = hyper<5>(2, 3)"<<"       my = "<<hyper<5>(2, 3)<<std::endl;
		std::cout<<"right = hyper<3>(2, 3)"<<"       my = "<<hyper<3>(2, 3)<<std::endl;
	}
};

//////////////////////////////////////////////////////////////////////////////////

int main()
{
	Output a;
	a.hyperOutput();

	return 0;
}